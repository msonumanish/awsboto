def reward_function(params):
    '''
    Optimized reward function to minimize off-track occurrences
    '''

    # Read input parameters
    track_width = params['track_width']
    distance_from_center = params['distance_from_center']
    speed = params['speed']
    all_wheels_on_track = params['all_wheels_on_track']
    steering_angle = abs(params['steering_angle'])
    progress = params['progress']
    steps = params['steps']
    waypoints = params['waypoints']
    closest_waypoints = params['closest_waypoints']

    # Initialize reward
    reward = 1.0

    # Calculate 3 markers that are at varying distances from the center line
    marker_1 = 0.1 * track_width
    marker_2 = 0.25 * track_width
    marker_3 = 0.5 * track_width

    # Give a high reward if the car is inside the marker 1 boundary
    if distance_from_center <= marker_1:
        reward = 1.0
    # Give a medium reward if the car is inside the marker 2 boundary
    elif distance_from_center <= marker_2:
        reward = 0.5
    # Give a low reward if the car is inside the marker 3 boundary
    elif distance_from_center <= marker_3:
        reward = 0.1
    # The car is out of bounds
    else:
        reward = 1e-3  # likely crashed/ close to off track

    # Penalize if the car goes off track
    if not all_wheels_on_track:
        reward = 1e-3

    # Reward for speed, but not too high to prevent it from going off track
    SPEED_THRESHOLD = 2.5
    if speed < SPEED_THRESHOLD:
        reward += speed / SPEED_THRESHOLD
    else:
        reward += 1.0

    # Penalize for sharp steering to prevent zigzag behavior
    ABS_STEERING_THRESHOLD = 15.0
    if steering_angle > ABS_STEERING_THRESHOLD:
        reward *= 0.8

    # Reward for making progress
    reward += progress / 100.0

    # Reward for staying on the optimal path between waypoints
    next_waypoint = waypoints[closest_waypoints[1]]
    prev_waypoint = waypoints[closest_waypoints[0]]

    # Calculate the direction of the center line based on the closest waypoints
    track_direction = math.atan2(next_waypoint[1] - prev_waypoint[1], next_waypoint[0] - prev_waypoint[0])
    track_direction = math.degrees(track_direction)

    # Calculate the difference between the track direction and the heading direction of the car
    direction_diff = abs(track_direction - params['heading'])

    # Penalize if the difference is too large
    DIRECTION_THRESHOLD = 10.0
    if direction_diff > DIRECTION_THRESHOLD:
        reward *= 0.5

    # Add more weight to the final reward if the car has all wheels on track and is near the center line
    if all_wheels_on_track and distance_from_center <= marker_1:
        reward *= 2.0

    return float(reward)
