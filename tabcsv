import csv

import csv

def copy_csv_with_new_fields(input_csv, output_csv, new_fields):
    """
    Creates a copy of the CSV file with additional new columns but without modifying values.
    """
    with open(input_csv, mode="r", newline="") as infile, open(output_csv, mode="w", newline="") as outfile:
        reader = csv.DictReader(infile)
        fieldnames = reader.fieldnames + new_fields  # Add new fields to header
        writer = csv.DictWriter(outfile, fieldnames=fieldnames)
        
        writer.writeheader()
        for row in reader:
            for field in new_fields:
                row[field] = ""  # Initialize new fields as empty
            writer.writerow(row)

    print(f"CSV copied with new fields: {output_csv}")

def update_csv_field(csv_file, search_key, search_value, update_field, update_value):
    """
    Searches for a specific row based on 'search_key' and updates 'update_field' with 'update_value'.
    """
    updated_rows = []

    with open(csv_file, mode="r", newline="") as file:
        reader = csv.DictReader(file)
        fieldnames = reader.fieldnames

        for row in reader:
            if row[search_key] == search_value:  # Match row for update
                row[update_field] = update_value
            updated_rows.append(row)

    with open(csv_file, mode="w", newline="") as file:
        writer = csv.DictWriter(file, fieldnames=fieldnames)
        writer.writeheader()
        writer.writerows(updated_rows)

    print(f"CSV updated: {update_field} set to '{update_value}' where {search_key}='{search_value}'.")

# === Usage ===
input_csv = "data.csv"   # Replace with actual input CSV file
output_csv = "updated_data.csv"  # Output file with new columns
new_fields = ["Status"]  # Additional columns to be added

# Step 1: Create a copy of the CSV with new fields
copy_csv_with_new_fields(input_csv, output_csv, new_fields)

# Step 2: Update a specific row in the copied CSV
update_csv_field(output_csv, "site_name", "A", "Status", "Passed")  # Example: Mark all 'A' as Passed



def copy_csv_with_new_fields(input_csv, output_csv, new_fields):
    """Creates a copy of the input CSV with additional new columns."""
    with open(input_csv, mode="r", newline="") as infile, open(output_csv, mode="w", newline="") as outfile:
        reader = csv.DictReader(infile)
        fieldnames = reader.fieldnames + new_fields  # Add new fields to header
        writer = csv.DictWriter(outfile, fieldnames=fieldnames)
        
        writer.writeheader()
        data = [row for row in reader]  # Store all rows for processing
        writer.writerows(data)  # Write initial data (without modifications)
    
    return output_csv  # Return the new CSV file path

def find_and_update_rows(csv_file, site_name, update_logic):
    """Searches for rows matching a site_name and updates new fields using custom logic."""
    updated_rows = []
    
    with open(csv_file, mode="r", newline="") as file:
        reader = csv.DictReader(file)
        fieldnames = reader.fieldnames

        for row in reader:
            if row["site_name"] == site_name:
                row.update(update_logic(row))  # Apply custom logic to update fields
            updated_rows.append(row)

    return updated_rows, fieldnames

def write_updated_csv(csv_file, updated_rows, fieldnames):
    """Writes updated rows to the CSV file."""
    with open(csv_file, mode="w", newline="") as file:
        writer = csv.DictWriter(file, fieldnames=fieldnames)
        writer.writeheader()
        writer.writerows(updated_rows)

# === Usage ===

input_csv = "data.csv"  # Replace with actual input CSV file
output_csv = "updated_data.csv"  # Output file with new columns
new_fields = ["Status", "Remarks"]  # Fields to be added

# Step 1: Copy CSV with new fields
copy_csv_with_new_fields(input_csv, output_csv, new_fields)

# Step 2: Define update logic
def update_logic(row):
    """Custom logic for updating new fields based on conditions."""
    if row["domain"] == "client":
        return {"Status": "Passed", "Remarks": "Client domain verified"}
    elif row["domain"] == "intranet":
        return {"Status": "Failed", "Remarks": "Intranet domain issue"}
    else:
        return {"Status": "Unknown", "Remarks": "Uncategorized"}

# Step 3: Find & update rows
updated_rows, fieldnames = find_and_update_rows(output_csv, "A", update_logic)

# Step 4: Write the modified data back to CSV
write_updated_csv(output_csv, updated_rows, fieldnames)

print(f"Updated CSV saved as {output_csv}")
