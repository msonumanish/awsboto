import csv

def copy_csv_with_new_fields(input_csv, output_csv, new_fields):
    """
    Creates a copy of the CSV file with additional new columns but without modifying values.
    """
    with open(input_csv, mode="r", newline="") as infile, open(output_csv, mode="w", newline="") as outfile:
        reader = csv.DictReader(infile)
        fieldnames = reader.fieldnames + new_fields  # Add new fields to header
        writer = csv.DictWriter(outfile, fieldnames=fieldnames)
        
        writer.writeheader()
        for row in reader:
            for field in new_fields:
                row[field] = ""  # Initialize new fields as empty
            writer.writerow(row)

    print(f"CSV copied with new fields: {output_csv}")

def update_csv_fields(csv_file, search_criteria, updates):
    """
    Searches for rows based on multiple criteria (site_name, domain, function_goup)
    and updates multiple fields (Status, Remarks).
    
    Parameters:
    - csv_file: CSV file to update.
    - search_criteria: Dictionary containing `site_name`, `domain`, `function_goup`.
    - updates: Dictionary containing fields to update (e.g., {"Status": "Passed", "Remarks": "Checked"}).
    """
    updated_rows = []

    with open(csv_file, mode="r", newline="") as file:
        reader = csv.DictReader(file)
        fieldnames = reader.fieldnames

        for row in reader:
            # Check if the row matches all search criteria
            if (row["site_name"] == search_criteria["site_name"] and
                row["domain"] == search_criteria["domain"] and
                row["function_goup"] == search_criteria["function_goup"]):
                
                # Apply updates (e.g., update Status and Remarks)
                for field, value in updates.items():
                    row[field] = value

            updated_rows.append(row)

    # Write the updated data back to the CSV
    with open(csv_file, mode="w", newline="") as file:
        writer = csv.DictWriter(file, fieldnames=fieldnames)
        writer.writeheader()
        writer.writerows(updated_rows)

    print(f"CSV updated for criteria {search_criteria}: {updates}")

# === Usage ===
input_csv = "data.csv"   # Replace with actual input CSV file
output_csv = "updated_data.csv"  # Output file with new columns
new_fields = ["Status", "Remarks"]  # Additional columns to be added

# Step 1: Create a copy of the CSV with new fields
copy_csv_with_new_fields(input_csv, output_csv, new_fields)

# Step 2: Update specific row based on multiple search criteria
update_csv_fields(
    output_csv,
    search_criteria={"site_name": "A", "domain": "client", "function_goup": "func2"},
    updates={"Status": "Passed", "Remarks": "Verified by team"}
)

update_csv_fields(
    output_csv,
    search_criteria={"site_name": "A", "domain": "intanet", "function_goup": "func3"},
    updates={"Status": "Failed", "Remarks": "Issue detected"}
)
